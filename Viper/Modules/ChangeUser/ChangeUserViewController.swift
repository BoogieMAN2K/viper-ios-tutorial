//
//  ChangeUserViewController.swift
//  Viper
//
//  Created by Victor Alejandria on 12/09/2019.
//  Copyright (c) 2019 Victor Alejandria. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class ChangeUserViewController: UIViewController {

    // MARK: - Public properties -
    var presenter: ChangeUserPresenterInterface!

    // MARK: - Private properties -
	@IBOutlet private weak var nameTextfield: UITextField!
	@IBOutlet private weak var username: UITextField!
	@IBOutlet private weak var email: UITextField!
	@IBOutlet private weak var address: UITextField!
	@IBOutlet private weak var phone: UITextField!
	@IBOutlet private weak var website: UITextField!
	private let disposeBag = DisposeBag()

    // MARK: - Lifecycle -
    override func viewDidLoad() {
        super.viewDidLoad()
        configure()
    }

	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)

		setupTextField()
	}

	func setupTextField() {
		presenter.user.asObservable()
			.bind { (user) in
				self.nameTextfield.text = user.name
				self.username.text = user.username
				self.email.text = user.email
				self.address.text = user.address
				self.phone.text = user.phone
				self.website.text = user.website
		}.disposed(by: disposeBag)

		nameTextfield.rx.text.orEmpty
			.bind(onNext: {
				let tempUser = self.presenter.user.value
				let newUser = User(id: tempUser.id, name: $0, username: tempUser.username,
								   email: tempUser.email, address: tempUser.address, phone: tempUser.phone,
								   website: tempUser.website, company: tempUser.company)
				self.presenter.user.accept(newUser)
			}).disposed(by: disposeBag)

		username.rx.text.orEmpty
			.bind(onNext: {
				let tempUser = self.presenter.user.value
				let newUser = User(id: tempUser.id, name: tempUser.name, username: $0,
								   email: tempUser.email, address: tempUser.address, phone: tempUser.phone,
								   website: tempUser.website, company: tempUser.company)
				self.presenter.user.accept(newUser)
			}).disposed(by: disposeBag)

		email.rx.text.orEmpty
			.bind(onNext: {
				let tempUser = self.presenter.user.value
				let newUser = User(id: tempUser.id, name: tempUser.name, username: tempUser.username,
								   email: $0, address: tempUser.address, phone: tempUser.phone,
								   website: tempUser.website, company: tempUser.company)
				self.presenter.user.accept(newUser)
				if !$0.isValidEmail {
					self.email.backgroundColor = UIColor(red: 255/255, green: 120/255, blue: 0/255, alpha: 0.6)
				} else {
					self.email.backgroundColor = UIColor.white
				}
			}).disposed(by: disposeBag)

		address.rx.text.orEmpty
			.bind(onNext: {
				let tempUser = self.presenter.user.value
				let newUser = User(id: tempUser.id, name: tempUser.name, username: tempUser.username,
								   email: tempUser.email, address: $0, phone: tempUser.phone,
								   website: tempUser.website, company: tempUser.company)
				self.presenter.user.accept(newUser)
			}).disposed(by: disposeBag)

		phone.rx.text.orEmpty
			.bind(onNext: {
				let tempUser = self.presenter.user.value
				let newUser = User(id: tempUser.id, name: tempUser.name, username: tempUser.username,
								   email: tempUser.email, address: tempUser.address, phone: $0,
								   website: tempUser.website, company: tempUser.company)
				self.presenter.user.accept(newUser)
			}).disposed(by: disposeBag)

		website.rx.text.orEmpty
			.bind(onNext: {
				let tempUser = self.presenter.user.value
				let newUser = User(id: tempUser.id, name: tempUser.name, username: tempUser.username,
								   email: tempUser.email, address: tempUser.address, phone: tempUser.phone,
								   website: $0, company: tempUser.company)
				self.presenter.user.accept(newUser)
			}).disposed(by: disposeBag)
	}
	
}

// MARK: - Extensions -

extension ChangeUserViewController: ChangeUserViewInterface {
}

private extension ChangeUserViewController {

    func configure() {
        let output = ChangeUser.ViewOutput()

        let input = presenter.configure(with: output)
    }

}
