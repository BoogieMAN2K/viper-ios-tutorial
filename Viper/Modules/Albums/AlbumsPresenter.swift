//
//  AlbumsPresenter.swift
//  Viper
//
//  Created by Victor Alejandria on 30/08/2019.
//  Copyright (c) 2019 Victor Alejandria. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import RxCocoa
import RxSwift

final class AlbumsPresenter {

	// MARK: - Private properties -
	private var privateUser: BehaviorRelay<User> = BehaviorRelay(value: User())
	private var privateAlbums:BehaviorRelay<[Album]> = BehaviorRelay(value: [])

	private unowned let view: AlbumsViewInterface
	private let interactor: AlbumsInteractorInterface
	private let wireframe: AlbumsWireframeInterface
	private let disposeBag = DisposeBag()

	// MARK: - Lifecycle -

	init(view: AlbumsViewInterface, interactor: AlbumsInteractorInterface, wireframe: AlbumsWireframeInterface, user: ServicesUser) {
		self.privateUser.accept(User(user: user))
		self.view = view
		self.interactor = interactor
		self.wireframe = wireframe
	}
}

// MARK: - Extensions -

extension AlbumsPresenter: AlbumsPresenterInterface {
	func changeUser() {
		self.wireframe.willChange(user: privateUser)
	}

	var user: BehaviorRelay<User> {
		return privateUser
	}

	var albums: BehaviorRelay<[Album]> {
		return privateAlbums
	}

	func showUserAlbums(completion: @escaping AlbumsCompletionBlock) {
		DispatchQueue.global(qos: .background).async {
			self.interactor.getAlbumsBy(user: self.privateUser.value.id ?? 0) { [weak self] (albums) -> (Void) in
				DispatchQueue.main.async {
					completion(albums)
					self?.privateAlbums.accept(albums)
				}
			}
		}
	}

	func showAlbumWith(id: Int) {
		DispatchQueue.global(qos: .background).async {
			self.interactor.getAlbumBy(id: id) { [weak self] (album) -> (Void) in
				DispatchQueue.main.async {
					self?.wireframe.willShowUser(album: album)
				}
			}
		}
	}

	func show(album: Album) {
		self.wireframe.willShowUser(album: album)
	}
}
