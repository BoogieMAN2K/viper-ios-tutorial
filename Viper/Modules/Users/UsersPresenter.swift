//
//  UsersPresenter.swift
//  Viper
//
//  Created by Victor Alejandria on 30/08/2019.
//  Copyright (c) 2019 Victor Alejandria. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import RxSwift
import RxCocoa

final class UsersPresenter {
	
	// MARK: - Private properties -
	
	private var privateUsers: BehaviorRelay<[ServicesUser]> = BehaviorRelay(value: [])
	private unowned let view: UsersViewInterface
	private let interactor: UsersInteractorInterface
	private let wireframe: UsersWireframeInterface
	private let disposeBag = DisposeBag()
	
	// MARK: - Lifecycle -
	
	init(view: UsersViewInterface, interactor: UsersInteractorInterface, wireframe: UsersWireframeInterface) {
		self.view = view
		self.interactor = interactor
		self.wireframe = wireframe
	}
}

// MARK: - Extensions -

extension UsersPresenter: UsersPresenterInterface {
	var users: BehaviorRelay<[ServicesUser]> {
		return privateUsers
	}
	
	func showUsers(completion: @escaping UsersCompletionBlock) {
		interactor.getUsers { [weak self] (users) -> (Void) in
			self?.privateUsers.accept(users)
			completion(users)
		}
	}
	
	func showUserWith(index: Int) {
		interactor.getUserBy(id: privateUsers.value[index].id ?? 0) { [weak self] (user) -> (Void) in
			DispatchQueue.main.async {
				self?.wireframe.willShow(user: user)
			}
		}
	}
}
