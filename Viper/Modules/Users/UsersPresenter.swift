//
//  UsersPresenter.swift
//  Viper
//
//  Created by Victor Alejandria on 30/08/2019.
//  Copyright (c) 2019 Victor Alejandria. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import RxSwift
import RxCocoa

final class UsersPresenter {
	
	// MARK: - Private properties -
	
	private var privateUsers: BehaviorRelay<[ServicesUser]> = BehaviorRelay(value: [])
	private unowned let view: UsersViewInterface
	private let interactor: UsersInteractorInterface
	private let wireframe: UsersWireframeInterface
	private let disposeBag = DisposeBag()
	
	// MARK: - Lifecycle -
	
	init(view: UsersViewInterface, interactor: UsersInteractorInterface, wireframe: UsersWireframeInterface) {
		self.view = view
		self.interactor = interactor
		self.wireframe = wireframe
	}
}

// MARK: - Extensions -

extension UsersPresenter: UsersPresenterInterface {
	var users: BehaviorRelay<[ServicesUser]> {
		return privateUsers
	}
	
	func showUsers() {
		self.interactor.getUsers().drive(onNext: { [unowned self] (users) in
			self.privateUsers.accept(users)
		}).disposed(by: disposeBag)
	}
	
	func showUserWith(index: Int) {
		self.interactor.getUserBy(id: index).drive(onNext: { (user) in
			self.wireframe.willShow(user: user)
		}).disposed(by: disposeBag)
	}
}
