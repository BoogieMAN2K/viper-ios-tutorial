//
//  PhotosViewController.swift
//  Viper
//
//  Created by Victor Alejandria on 30/08/2019.
//  Copyright (c) 2019 Victor Alejandria. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import RxSwift

final class PhotosViewController: UIViewController {

	// MARK: - Public properties -
	var presenter: PhotosPresenterInterface!

	// MARK: - Private properties -
	@IBOutlet weak var collectionView: UICollectionView!
	private let disposeBag = DisposeBag()

	// MARK: - Lifecycle -
	override func viewDidLoad() {
		super.viewDidLoad()

	}

	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)

		collectionView.delegate = self
		showPhotos()
		self.collectionView.reloadData()
	}
}

// MARK: - UICollectionView DelegateFlowLayout -
extension PhotosViewController: UICollectionViewDelegateFlowLayout {
	func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
		return CGSize(width: 120, height: 120)
	}
}


// MARK: - Extensions -
extension PhotosViewController: PhotosViewInterface {
	func showPhotos() {
		presenter.showPhotosWithAlbum(id: presenter.album.value.id ?? 0) { [unowned self] (photos) -> (Void) in
			self.presenter.photos.asObservable()
				.bind(to: self.collectionView.rx.items(cellIdentifier: "photoCell", cellType: PhotoCollectionViewCell.self)) { (row, photo, cell) in
					cell.photoThumbnail.image = UIImage()
					if let cachedImage = self.presenter.localImageCache.value.object(forKey: photo.thumbnailUrl! as NSString) {
						cell.photoThumbnail.image = cachedImage
					} else {
						self.presenter.downloadPhotoWith(url: photo.thumbnailUrl!) { (data) -> (Void) in
							guard let downloadedImage = UIImage(data: data) else { return }
							self.presenter.localImageCache.value.setObject(downloadedImage, forKey: photo.thumbnailUrl! as NSString)
							cell.photoThumbnail.image = downloadedImage
						}
					}
				}.disposed(by: self.disposeBag)
		}
	}

	func presentAlbumActionWith(id: Int) {
	}

}
